// <auto-generated />
using System;
using LibraryIS.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace LibraryIS.Persistence.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.4")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("AuthorBook", b =>
                {
                    b.Property<Guid>("AuthorsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BooksId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("AuthorsId", "BooksId");

                    b.HasIndex("BooksId");

                    b.ToTable("AuthorBook");
                });

            modelBuilder.Entity("BookGenre", b =>
                {
                    b.Property<Guid>("BooksId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("GenresId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("BooksId", "GenresId");

                    b.HasIndex("GenresId");

                    b.ToTable("BookGenre");
                });

            modelBuilder.Entity("BookPublishingHouse", b =>
                {
                    b.Property<Guid>("BooksId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PublishingHousesId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("BooksId", "PublishingHousesId");

                    b.HasIndex("PublishingHousesId");

                    b.ToTable("BookPublishingHouse");
                });

            modelBuilder.Entity("GenreReaderProfile", b =>
                {
                    b.Property<Guid>("ReaderProfilesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TopGenresId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ReaderProfilesId", "TopGenresId");

                    b.HasIndex("TopGenresId");

                    b.ToTable("GenreReaderProfile");
                });

            modelBuilder.Entity("LibraryIS.Domain.Entities.Author", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Author");
                });

            modelBuilder.Entity("LibraryIS.Domain.Entities.Book", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("BookLanguageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PageCount")
                        .HasColumnType("int");

                    b.Property<DateTime>("PublicationDate")
                        .HasColumnType("datetime2");

                    b.Property<double>("Rating")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("BookLanguageId");

                    b.ToTable("Book");
                });

            modelBuilder.Entity("LibraryIS.Domain.Entities.ElectronicCopyRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("BookId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PagesRange")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("RequestingReaderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.HasIndex("RequestingReaderId");

                    b.ToTable("ElectronicCopyRequest");
                });

            modelBuilder.Entity("LibraryIS.Domain.Entities.Evaluation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("BookId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Rating")
                        .HasColumnType("float");

                    b.Property<Guid?>("ReaderProfileId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.HasIndex("ReaderProfileId");

                    b.ToTable("Evaluation");
                });

            modelBuilder.Entity("LibraryIS.Domain.Entities.Genre", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Genre");
                });

            modelBuilder.Entity("LibraryIS.Domain.Entities.Language", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Language");
                });

            modelBuilder.Entity("LibraryIS.Domain.Entities.PublishingHouse", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("PublishingHouse");
                });

            modelBuilder.Entity("LibraryIS.Domain.Entities.ReaderProfile", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("BornYear")
                        .HasColumnType("datetime2");

                    b.Property<string>("LibraryCard")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PassportSeriesAndNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ReaderProfile");
                });

            modelBuilder.Entity("LibraryIS.Domain.Entities.ReservedBook", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("BookedBookId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ReaderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("BookedBookId");

                    b.HasIndex("ReaderId");

                    b.ToTable("ReservedBook");
                });

            modelBuilder.Entity("LibraryIS.Domain.Entities.TakenBook", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("BookId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ReaderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ReceiveDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ReturnDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.HasIndex("ReaderId");

                    b.ToTable("TakenBook");
                });

            modelBuilder.Entity("LibraryIS.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("bit");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("User");
                });

            modelBuilder.Entity("AuthorBook", b =>
                {
                    b.HasOne("LibraryIS.Domain.Entities.Author", null)
                        .WithMany()
                        .HasForeignKey("AuthorsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LibraryIS.Domain.Entities.Book", null)
                        .WithMany()
                        .HasForeignKey("BooksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BookGenre", b =>
                {
                    b.HasOne("LibraryIS.Domain.Entities.Book", null)
                        .WithMany()
                        .HasForeignKey("BooksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LibraryIS.Domain.Entities.Genre", null)
                        .WithMany()
                        .HasForeignKey("GenresId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BookPublishingHouse", b =>
                {
                    b.HasOne("LibraryIS.Domain.Entities.Book", null)
                        .WithMany()
                        .HasForeignKey("BooksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LibraryIS.Domain.Entities.PublishingHouse", null)
                        .WithMany()
                        .HasForeignKey("PublishingHousesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GenreReaderProfile", b =>
                {
                    b.HasOne("LibraryIS.Domain.Entities.ReaderProfile", null)
                        .WithMany()
                        .HasForeignKey("ReaderProfilesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LibraryIS.Domain.Entities.Genre", null)
                        .WithMany()
                        .HasForeignKey("TopGenresId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LibraryIS.Domain.Entities.Book", b =>
                {
                    b.HasOne("LibraryIS.Domain.Entities.Language", "BookLanguage")
                        .WithMany()
                        .HasForeignKey("BookLanguageId");

                    b.Navigation("BookLanguage");
                });

            modelBuilder.Entity("LibraryIS.Domain.Entities.ElectronicCopyRequest", b =>
                {
                    b.HasOne("LibraryIS.Domain.Entities.Book", "Book")
                        .WithMany()
                        .HasForeignKey("BookId");

                    b.HasOne("LibraryIS.Domain.Entities.ReaderProfile", "RequestingReader")
                        .WithMany("ElectronicCopyRequests")
                        .HasForeignKey("RequestingReaderId");

                    b.Navigation("Book");

                    b.Navigation("RequestingReader");
                });

            modelBuilder.Entity("LibraryIS.Domain.Entities.Evaluation", b =>
                {
                    b.HasOne("LibraryIS.Domain.Entities.Book", "Book")
                        .WithMany()
                        .HasForeignKey("BookId");

                    b.HasOne("LibraryIS.Domain.Entities.ReaderProfile", "ReaderProfile")
                        .WithMany("Evaluations")
                        .HasForeignKey("ReaderProfileId");

                    b.Navigation("Book");

                    b.Navigation("ReaderProfile");
                });

            modelBuilder.Entity("LibraryIS.Domain.Entities.ReaderProfile", b =>
                {
                    b.HasOne("LibraryIS.Domain.Entities.User", "User")
                        .WithOne("ReaderProfile")
                        .HasForeignKey("LibraryIS.Domain.Entities.ReaderProfile", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("LibraryIS.Domain.Entities.ReservedBook", b =>
                {
                    b.HasOne("LibraryIS.Domain.Entities.Book", "BookedBook")
                        .WithMany()
                        .HasForeignKey("BookedBookId");

                    b.HasOne("LibraryIS.Domain.Entities.ReaderProfile", "Reader")
                        .WithMany("ReservedBooks")
                        .HasForeignKey("ReaderId");

                    b.Navigation("BookedBook");

                    b.Navigation("Reader");
                });

            modelBuilder.Entity("LibraryIS.Domain.Entities.TakenBook", b =>
                {
                    b.HasOne("LibraryIS.Domain.Entities.Book", "Book")
                        .WithMany()
                        .HasForeignKey("BookId");

                    b.HasOne("LibraryIS.Domain.Entities.ReaderProfile", "Reader")
                        .WithMany("TakenBooks")
                        .HasForeignKey("ReaderId");

                    b.Navigation("Book");

                    b.Navigation("Reader");
                });

            modelBuilder.Entity("LibraryIS.Domain.Entities.ReaderProfile", b =>
                {
                    b.Navigation("ElectronicCopyRequests");

                    b.Navigation("Evaluations");

                    b.Navigation("ReservedBooks");

                    b.Navigation("TakenBooks");
                });

            modelBuilder.Entity("LibraryIS.Domain.Entities.User", b =>
                {
                    b.Navigation("ReaderProfile");
                });
#pragma warning restore 612, 618
        }
    }
}
